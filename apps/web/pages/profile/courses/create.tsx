import { useState, ChangeEvent, useCallback, FormEvent, useEffect } from 'react'
import Head from 'next/head'
import { CredentialsFactoryAbi } from '@dae/abi'
import { usePrepareContractWrite } from 'wagmi'
import { Layout } from '@dae/ui'
import {
  FormControl,
  FormLabel,
  Text,
  Stack,
  Input,
  Button,
  Tabs,
  TabList,
  Tab,
  Heading,
  Box,
  Select,
} from '@chakra-ui/react'
import { useCreateCourse } from '@dae/hooks'
import { useToast } from '@chakra-ui/react'
import { RouteWithChainId } from '@dae/ui'

export default function AddCoursePage() {
  const [symbol, setSymbol] = useState<string>('')
  const [name, setName] = useState<string>('')
  const [bUri, setBUri] = useState<string>('')
  const [maxSupply, setMaxSupply] = useState<bigint>(BigInt(0))
  const [isBurnable, setIsBurnable] = useState(false)
  const toast = useToast()

  const { config } = usePrepareContractWrite({
    address: process.env.NEXT_PUBLIC_FACTORY_CONTRACT_ADDRESS as '0x${string}',
    functionName: 'createCourse',
    args: [isBurnable, name, symbol, bUri, maxSupply],
    abi: CredentialsFactoryAbi,
  })

  const { create, isLoading, isError, isSuccess, isSigning } =
    useCreateCourse(config)

  useEffect(() => {
    if (isError) {
      toast({
        title: 'Error creating course.',
        status: 'error',
      })
    }
    if (isSuccess) {
      toast({
        title: 'Course created with success!',
        status: 'success',
      })
    }
    if (isLoading) {
      toast({
        title: 'Creating course...',
        status: 'info',
      })
    }
  }, [isLoading, isError, isSuccess])

  const clearInputFields = () => {
    setName('')
    setSymbol('')
    setBUri('')
    setMaxSupply(BigInt(0))
  }

  const areInputsValid = () => {
    if (
      name !== '' &&
      symbol !== '' &&
      bUri !== '' &&
      maxSupply !== null &&
      maxSupply > 0
    ) {
      return true
    } else {
      return false
    }
  }

  const handleCredentialsTypeChange = useCallback(
    (event: ChangeEvent<HTMLSelectElement>) => {
      const targetValue = event.target.value
      if (targetValue === 'not-burnable') {
        setIsBurnable(false)
      } else {
        setIsBurnable(true)
      }
    },
    [],
  )

  const handleSymbolChange = useCallback(
    (event: ChangeEvent<HTMLInputElement>) => {
      const input = event.target.value
      setSymbol(input)
    },
    [],
  )

  const handleNameChange = useCallback(
    (event: ChangeEvent<HTMLInputElement>) => {
      const input = event.target.value
      setName(input)
    },
    [],
  )

  const handleBUriChange = useCallback(
    (event: ChangeEvent<HTMLInputElement>) => {
      const input = event.target.value
      setBUri(input)
    },
    [],
  )

  const handleMaxSupplyChange = useCallback(
    (event: ChangeEvent<HTMLInputElement>) => {
      const input = event.target.value
      if (input === '') {
        setMaxSupply(BigInt(0))
        return
      }

      const isNumber = /^\d+$/.test(input)
      if (isNumber) {
        setMaxSupply(BigInt(input))
      }
    },
    [],
  )

  const handleCreateCourse = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const validInputs = areInputsValid()

    if (validInputs) {
      try {
        await create()
        clearInputFields()
      } catch (e: any) {
        console.error(e)
      }
    }
  }

  return (
    <>
      <Head>
        <title>New Course</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Layout.Profile heading='New Course'>
        <Stack spacing={8}>
          <Tabs defaultIndex={2}>
            <TabList>
              <RouteWithChainId href='/profile/courses/teaching'>
                <Tab>Teaching</Tab>
              </RouteWithChainId>
              <RouteWithChainId href='/profile/courses/partecipating'>
                <Tab>Partecipating</Tab>
              </RouteWithChainId>
              <Tab>Create</Tab>
            </TabList>
          </Tabs>

          <Box
            padding={8}
            borderRadius='xl'
            borderColor={'gray.300'}
            borderWidth={'1px'}
          >
            <form onSubmit={handleCreateCourse}>
              <Stack spacing={4}>
                <Box>
                  <Heading fontWeight='semibold' fontSize={'3xl'}>
                    Create new course
                  </Heading>
                  <Text fontSize={'lg'}>
                    Fill in all the form fields to create a new course and start
                    teaching!
                  </Text>
                </Box>
                <FormControl>
                  <FormLabel>
                    Select the type of credential this course implements
                  </FormLabel>
                  <Select onChange={handleCredentialsTypeChange}>
                    <option value='not-burnable'>Not Burnable</option>
                    <option value='burnable'>Burnable</option>
                  </Select>
                </FormControl>
                <FormControl>
                  <FormLabel>Course Name:</FormLabel>
                  <Input onChange={handleNameChange} value={name} type='text' />
                </FormControl>
                <FormControl>
                  <FormLabel>Symbol:</FormLabel>
                  <Input
                    onChange={handleSymbolChange}
                    value={symbol}
                    type='text'
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Max partecipants:</FormLabel>
                  <Input
                    onChange={handleMaxSupplyChange}
                    value={Number(maxSupply) !== 0 ? maxSupply.toString() : ''}
                    autoComplete='off'
                    autoCorrect='off'
                    type='text'
                  />
                </FormControl>
                <FormControl>
                  <FormLabel>Metadata URL:</FormLabel>
                  <Input
                    onChange={handleBUriChange}
                    value={bUri}
                    type='bUri'
                    autoComplete='off'
                    placeholder=''
                  />
                </FormControl>
                <Button
                  colorScheme='blue'
                  type='submit'
                  disabled={isLoading || isSigning}
                  isLoading={isLoading || isSigning}
                  loadingText='Submitting'
                >
                  Create course
                </Button>
              </Stack>
            </form>
          </Box>
        </Stack>
      </Layout.Profile>
    </>
  )
}
